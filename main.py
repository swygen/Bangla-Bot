from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, InputMediaPhoto
from telegram.ext import ApplicationBuilder, CommandHandler, CallbackQueryHandler, MessageHandler, filters, ContextTypes
import datetime, os
from keep_alive import keep_alive

ADMIN_ID = 6243881362  # ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶ü‡ßá‡¶≤‡¶ø‡¶ó‡ßç‡¶∞‡¶æ‡¶Æ ‡¶á‡¶â‡¶ú‡¶æ‡¶∞ ‡¶Ü‡¶á‡¶°‡¶ø ‡¶è‡¶ñ‡¶æ‡¶®‡ßá ‡¶¨‡¶∏‡¶æ‡¶®
GROUP_IDS = [-1002560574306, -1002622279798, -1002676258756]

# ‡¶á‡¶â‡¶ú‡¶æ‡¶∞ ‡¶Ü‡¶á‡¶°‡¶ø ‡¶∏‡¶Ç‡¶∞‡¶ï‡ßç‡¶∑‡¶£
def save_user_id(user_id):
    with open("user_ids.txt", "a+") as f:
        f.seek(0)
        ids = f.read().splitlines()
        if str(user_id) not in ids:
            f.write(str(user_id) + "\n")

# Start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    save_user_id(user.id)

    keyboard = [
        [InlineKeyboardButton("‚úÖ Joined", callback_data='check_join')],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    text = f"""‡¶∏‡ßç‡¶¨‡¶æ‡¶ó‡¶§‡¶Æ {user.first_name}!
Bangla Quiz Hub - ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶ú‡ßç‡¶û‡¶æ‡¶® ‡¶¨‡ßÉ‡¶¶‡ßç‡¶ß‡¶ø‡¶∞ ‡¶è‡¶ï ‡¶Ö‡¶®‡¶®‡ßç‡¶Ø ‡¶™‡ßç‡¶≤‡ßç‡¶Ø‡¶æ‡¶ü‡¶´‡¶∞‡ßç‡¶Æ‡ßá ‡¶Ü‡¶™‡¶®‡¶æ‡¶ï‡ßá ‡¶∏‡ßç‡¶¨‡¶æ‡¶ó‡¶§‡¶Æ!

**‡¶∂‡ßÅ‡¶∞‡ßÅ ‡¶ï‡¶∞‡¶æ‡¶∞ ‡¶Ü‡¶ó‡ßá ‡¶®‡¶ø‡¶ö‡ßá‡¶∞ ‡ß©‡¶ü‡¶ø ‡¶ó‡ßç‡¶∞‡ßÅ‡¶™‡ßá ‡¶ú‡ßü‡ßá‡¶® ‡¶ï‡¶∞‡ßÅ‡¶®:**  
1. [Gen Z 078](https://t.me/gen_z078)  
2. [Trick BD 07](https://t.me/trick_bd07)  
3. [Swygen](https://t.me/swygen)

‡¶ó‡ßç‡¶∞‡ßÅ‡¶™‡ßá ‡¶ú‡ßü‡ßá‡¶® ‡¶ï‡¶∞‡¶æ‡¶∞ ‡¶™‡¶∞ "‚úÖ Joined" ‡¶¨‡¶æ‡¶ü‡¶®‡ßá ‡¶ï‡ßç‡¶≤‡¶ø‡¶ï ‡¶ï‡¶∞‡ßÅ‡¶®‡•§
"""
    await update.message.reply_text(text, reply_markup=reply_markup, parse_mode="Markdown")

# Check Join
async def check_join(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    joined_all = all(
        (await context.bot.get_chat_member(group_id, user_id)).status not in ['left', 'kicked']
        for group_id in GROUP_IDS
    )

    if joined_all:
        keyboard = [
            [InlineKeyboardButton("üë§ Profile", callback_data='profile')],
            [InlineKeyboardButton("üîó Share", callback_data='share')],
            [InlineKeyboardButton("üåê Website", callback_data='website')],
            [InlineKeyboardButton("üõ† Support", callback_data='support')],
        ]
        await update.callback_query.message.reply_text("‚úÖ ‡¶Ü‡¶™‡¶®‡¶ø ‡¶∏‡¶´‡¶≤‡¶≠‡¶æ‡¶¨‡ßá ‡¶∏‡¶¨ ‡¶ó‡ßç‡¶∞‡ßÅ‡¶™‡ßá ‡¶ú‡ßü‡ßá‡¶® ‡¶ï‡¶∞‡ßá‡¶õ‡ßá‡¶®‡•§", reply_markup=InlineKeyboardMarkup(keyboard))
    else:
        await update.callback_query.message.reply_text("‚ùå ‡¶¶‡ßü‡¶æ ‡¶ï‡¶∞‡ßá ‡¶Ü‡¶ó‡ßá ‡¶∏‡¶¨‡¶ó‡ßÅ‡¶≤‡ßã ‡¶ó‡ßç‡¶∞‡ßÅ‡¶™‡ßá ‡¶ú‡ßü‡ßá‡¶® ‡¶ï‡¶∞‡ßÅ‡¶® ‡¶è‡¶¨‡¶Ç ‡¶Ü‡¶¨‡¶æ‡¶∞ ‡¶ö‡ßá‡¶∑‡ßç‡¶ü‡¶æ ‡¶ï‡¶∞‡ßÅ‡¶®‡•§")

# Callback
async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    user = query.from_user
    if query.data == 'profile':
        date = datetime.datetime.now().strftime("%d-%m-%Y")
        await query.message.reply_text(f"üë§ ‡¶®‡¶æ‡¶Æ: {user.first_name}\nüÜî ‡¶á‡¶â‡¶ú‡¶æ‡¶∞ ‡¶Ü‡¶á‡¶°‡¶ø: {user.id}\nüìÖ ‡¶ú‡ßü‡ßá‡¶® ‡¶§‡¶æ‡¶∞‡¶ø‡¶ñ: {date}\nüåç ‡¶¨‡¶æ‡¶Ç‡¶≤‡¶æ‡¶¶‡ßá‡¶∂‡¶ø")
    elif query.data == 'share':
        await query.message.reply_text("Bangla Quiz Hub ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶¨‡¶®‡ßç‡¶ß‡ßÅ‡¶¶‡ßá‡¶∞ ‡¶∏‡¶æ‡¶•‡ßá ‡¶∂‡ßá‡¶Ø‡¶º‡¶æ‡¶∞ ‡¶ï‡¶∞‡ßÅ‡¶® ‡¶è‡¶¨‡¶Ç ‡¶§‡¶æ‡¶¶‡ßá‡¶∞ ‡¶ï‡ßá‡¶â ‡¶ú‡ßç‡¶û‡¶æ‡¶® ‡¶Ö‡¶∞‡ßç‡¶ú‡¶® ‡¶è‡¶∞ ‡¶∏‡ßÅ‡¶Ø‡ßã‡¶ó ‡¶ï‡¶∞‡ßá ‡¶¶‡¶ø‡¶®!\n\nüîó ‡¶∞‡ßá‡¶´‡¶æ‡¶∞ ‡¶≤‡¶ø‡¶Ç‡¶ï: https://t.me/YourBotUsername?start=")
    elif query.data == 'website':
        await query.message.reply_text("üåê Bangla Quiz Hub: https://bangla-quiz-hub.netlify.app/")
    elif query.data == 'support':
        await query.message.reply_text("‡¶∏‡¶æ‡¶π‡¶æ‡¶Ø‡ßç‡¶Ø‡ßá‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶Ø‡ßã‡¶ó‡¶æ‡¶Ø‡ßã‡¶ó ‡¶ï‡¶∞‡ßÅ‡¶®: @Swygen_bd")

# Broadcast: Admin Command
broadcast_state = {}

async def broadcast(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id != ADMIN_ID:
        return await update.message.reply_text("‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶Ö‡¶®‡ßÅ‡¶Æ‡¶§‡¶ø ‡¶®‡ßá‡¶á‡•§")
    broadcast_state[update.effective_user.id] = 'awaiting'
    await update.message.reply_text("‡¶ï‡¶ø ‡¶™‡¶æ‡¶†‡¶æ‡¶§‡ßá ‡¶ö‡¶æ‡¶®? ‡¶∂‡ßÅ‡¶ß‡ßÅ ‡¶ü‡ßá‡¶ï‡ßç‡¶∏‡¶ü ‡¶≤‡¶ø‡¶ñ‡ßÅ‡¶® ‡¶Ö‡¶•‡¶¨‡¶æ ‡¶è‡¶ï‡¶ü‡¶ø ‡¶õ‡¶¨‡¶ø ‡¶™‡¶æ‡¶†‡¶æ‡¶® ‡¶á‡¶®‡¶≤‡¶æ‡¶á‡¶® ‡¶¨‡¶æ‡¶ü‡¶®‡¶∏‡¶π‡•§")

# Handle Broadcast Message or Photo
async def handle_broadcast(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id != ADMIN_ID or broadcast_state.get(update.effective_user.id) != 'awaiting':
        return

    with open("user_ids.txt") as f:
        ids = [int(i.strip()) for i in f if i.strip().isdigit()]

    keyboard = InlineKeyboardMarkup(InlineKeyboardButton("üåê Visit Website", url="https://bangla-quiz-hub.netlify.app"))

    for uid in ids:
        try:
            if update.message.photo:
                file_id = update.message.photo[-1].file_id
                await context.bot.send_photo(uid, photo=file_id, caption=update.message.caption, reply_markup=keyboard)
            else:
                await context.bot.send_message(uid, update.message.text, reply_markup=keyboard)
        except:
            continue

    await update.message.reply_text("‚úÖ ‡¶∏‡¶ï‡¶≤ ‡¶á‡¶â‡¶ú‡¶æ‡¶∞‡¶ï‡ßá ‡¶®‡ßã‡¶ü‡¶ø‡¶´‡¶ø‡¶ï‡ßá‡¶∂‡¶® ‡¶™‡¶æ‡¶†‡¶æ‡¶®‡ßã ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá‡•§")
    broadcast_state.pop(update.effective_user.id, None)

# Main
if __name__ == '__main__':
    keep_alive()
    app = ApplicationBuilder().token("7772481310:AAFbajzs75hBtuNzPTHd7Ygbj8ij9cRA8Xs").build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("broadcast", broadcast))
    app.add_handler(CallbackQueryHandler(check_join, pattern='check_join'))
    app.add_handler(CallbackQueryHandler(button_handler))
    app.add_handler(MessageHandler(filters.TEXT | filters.PHOTO, handle_broadcast))
    print("Bot is running...")
    app.run_polling()
