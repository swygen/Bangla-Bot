from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, InputMediaPhoto
from telegram.ext import ApplicationBuilder, CommandHandler, CallbackQueryHandler, ContextTypes, MessageHandler, filters
from datetime import datetime
import logging
import os

# --- Logging ---
logging.basicConfig(level=logging.INFO)

# --- Replace with your bot token and admin ID ---
BOT_TOKEN = "7772481310:AAFbajzs75hBtuNzPTHd7Ygbj8ij9cRA8Xs"
ADMIN_ID = 6243881362  # Replace with your Telegram ID

# --- Group IDs where user must join ---
GROUP_IDS = [
    -1002560574306,  # @gen_z078
    -1002622279798,  # @trick_bd07
    -1002676258756   # @swygen
]

# --- Dictionary to save join dates ---
user_join_dates = {}

# --- Start Command ---
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    user_join_dates[user.id] = datetime.now().strftime("%Y-%m-%d %H:%M:%S")

    keyboard = [
        [InlineKeyboardButton("‚úÖ Joined", callback_data='check_join')],
        [InlineKeyboardButton("Join Group 1", url="https://t.me/gen_z078")],
        [InlineKeyboardButton("Join Group 2", url="https://t.me/trick_bd07")],
        [InlineKeyboardButton("Join Group 3", url="https://t.me/swygen")],
    ]

    await update.message.reply_text(
        f"‡¶∏‡ßç‡¶¨‡¶æ‡¶ó‡¶§‡¶Æ {user.first_name}!\n\n‡¶è‡¶á ‡¶¨‡¶ü ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞‡ßá‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶Ü‡¶™‡¶®‡¶æ‡¶ï‡ßá ‡¶®‡¶ø‡¶ö‡ßá‡¶∞ ‡ß©‡¶ü‡¶ø ‡¶ó‡ßç‡¶∞‡ßÅ‡¶™‡ßá ‡¶ú‡ßü‡ßá‡¶® ‡¶ï‡¶∞‡¶§‡ßá ‡¶π‡¶¨‡ßá‡•§",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

# --- Check Join ---
async def check_join(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id

    try:
        joined_all = all(
            (await context.bot.get_chat_member(group_id, user_id)).status in ['member', 'administrator', 'creator']
            for group_id in GROUP_IDS
        )

        if joined_all:
            keyboard = [
                [InlineKeyboardButton("üë§ Profile", callback_data='profile')],
                [InlineKeyboardButton("üîó Share", callback_data='share')],
                [InlineKeyboardButton("üåê Website", callback_data='website')],
                [InlineKeyboardButton("üõ† Support", callback_data='support')],
            ]
            await update.callback_query.message.reply_text(
                "‚úÖ ‡¶Ü‡¶™‡¶®‡¶ø ‡¶∏‡¶´‡¶≤‡¶≠‡¶æ‡¶¨‡ßá ‡¶∏‡¶¨ ‡¶ó‡ßç‡¶∞‡ßÅ‡¶™‡ßá ‡¶ú‡ßü‡ßá‡¶® ‡¶ï‡¶∞‡ßá‡¶õ‡ßá‡¶®!",
                reply_markup=InlineKeyboardMarkup(keyboard)
            )
        else:
            await update.callback_query.message.reply_text(
                "‚ùå ‡¶¶‡¶Ø‡¶º‡¶æ ‡¶ï‡¶∞‡ßá ‡¶∏‡¶¨‡¶ó‡ßÅ‡¶≤‡ßã ‡¶ó‡ßç‡¶∞‡ßÅ‡¶™‡ßá ‡¶ú‡ßü‡ßá‡¶® ‡¶ï‡¶∞‡ßÅ‡¶® ‡¶è‡¶¨‡¶Ç ‡¶Ü‡¶¨‡¶æ‡¶∞ ‡¶ö‡ßá‡¶∑‡ßç‡¶ü‡¶æ ‡¶ï‡¶∞‡ßÅ‡¶®‡•§"
            )
    except Exception as e:
        await update.callback_query.message.reply_text(
            f"‚ö†Ô∏è ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ: `{e}`", parse_mode="Markdown"
        )

# --- Button Handlers ---
async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    user = update.effective_user

    if query.data == "profile":
        date = user_join_dates.get(user.id, "‡¶Ö‡¶ú‡¶æ‡¶®‡¶æ")
        text = f"üë§ ‡¶™‡ßç‡¶∞‡ßã‡¶´‡¶æ‡¶á‡¶≤ ‡¶§‡¶•‡ßç‡¶Ø\n\n‡¶®‡¶æ‡¶Æ: {user.full_name}\n‡¶á‡¶â‡¶ú‡¶æ‡¶∞ ‡¶Ü‡¶á‡¶°‡¶ø: `{user.id}`\n‡¶Ø‡ßã‡¶ó‡¶¶‡¶æ‡¶®: {date}"
        await query.message.reply_text(text, parse_mode="Markdown")

    elif query.data == "share":
        ref_link = f"https://t.me/YourBotUsername?start={user.id}"
        text = f"üì¢ Bangla Quiz Hub ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶¨‡¶®‡ßç‡¶ß‡ßÅ‡¶¶‡ßá‡¶∞ ‡¶∏‡¶æ‡¶•‡ßá ‡¶∂‡ßá‡¶Ø‡¶º‡¶æ‡¶∞ ‡¶ï‡¶∞‡ßÅ‡¶® ‡¶è‡¶¨‡¶Ç ‡¶§‡¶æ‡¶¶‡ßá‡¶∞ ‡¶ï‡ßá‡¶â ‡¶ú‡ßç‡¶û‡¶æ‡¶® ‡¶Ö‡¶∞‡ßç‡¶ú‡¶®‡ßá‡¶∞ ‡¶∏‡ßÅ‡¶Ø‡ßã‡¶ó ‡¶¶‡¶ø‡¶®!\n\n‡¶∞‡ßá‡¶´‡¶æ‡¶∞ ‡¶≤‡¶ø‡¶Ç‡¶ï:\n{ref_link}"
        await query.message.reply_text(text)

    elif query.data == "website":
        await query.message.reply_text("üåê Bangla Quiz Hub ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶ú‡ßç‡¶û‡¶æ‡¶® ‡¶Ö‡¶∞‡ßç‡¶ú‡¶®‡ßá‡¶∞ ‡¶è‡¶ï ‡¶Ö‡¶®‡¶®‡ßç‡¶Ø ‡¶∏‡¶ô‡ßç‡¶ó‡ßÄ:\nhttps://bangla-quiz-hub.netlify.app/")

    elif query.data == "support":
        await query.message.reply_text("üõ† ‡¶Ø‡ßá‡¶ï‡ßã‡¶®‡ßã ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ ‡¶¨‡¶æ ‡¶™‡ßç‡¶∞‡¶∂‡ßç‡¶®‡ßá‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶Ü‡¶Æ‡¶æ‡¶ï‡ßá ‡¶Æ‡ßá‡¶∏‡ßá‡¶ú ‡¶ï‡¶∞‡ßÅ‡¶®:\n@swygen_bd")

# --- Admin Notification Broadcast ---
async def admin_broadcast(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id != ADMIN_ID:
        await update.message.reply_text("‚ùå ‡¶Ü‡¶™‡¶®‡¶ø ‡¶è‡¶á ‡¶ï‡¶Æ‡¶æ‡¶®‡ßç‡¶° ‡¶ö‡¶æ‡¶≤‡¶æ‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡¶¨‡ßá‡¶® ‡¶®‡¶æ‡•§")
        return

    if not update.message.reply_to_message:
        await update.message.reply_text("‡¶è‡¶ï‡¶ü‡¶ø ‡¶õ‡¶¨‡¶ø / ‡¶ü‡ßá‡¶ï‡ßç‡¶∏‡¶ü‡ßá‡¶∞ ‡¶∞‡¶ø‡¶™‡ßç‡¶≤‡¶æ‡¶á ‡¶¶‡¶ø‡ßü‡ßá `/send` ‡¶≤‡¶ø‡¶ñ‡ßÅ‡¶®‡•§")
        return

    msg = update.message.reply_to_message
    users = list(user_join_dates.keys())

    sent = 0
    for uid in users:
        try:
            if msg.photo:
                await context.bot.send_photo(
                    chat_id=uid,
                    photo=msg.photo[-1].file_id,
                    caption=msg.caption or "‡¶®‡ßã‡¶ü‡¶ø‡¶´‡¶ø‡¶ï‡ßá‡¶∂‡¶®",
                    reply_markup=msg.reply_markup
                )
            else:
                await context.bot.send_message(
                    chat_id=uid,
                    text=msg.text or msg.caption,
                    reply_markup=msg.reply_markup
                )
            sent += 1
        except:
            pass

    await update.message.reply_text(f"‚úÖ ‡¶™‡¶æ‡¶†‡¶æ‡¶®‡ßã ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá: {sent} ‡¶ú‡¶®‡¶ï‡ßá")

# --- Keep Alive (Optional for Replit) ---
from keep_alive import keep_alive
keep_alive()

# --- Main Function ---
if __name__ == '__main__':
    app = ApplicationBuilder().token(BOT_TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("send", admin_broadcast))
    app.add_handler(CallbackQueryHandler(button_handler))
    app.add_handler(CallbackQueryHandler(check_join, pattern="check_join"))

    print("‚úÖ Bot is running...")
    app.run_polling()
